(define (make-accumulator start)
  (lambda (add)
    (begin (set! start (+ start add))
           start)))

(define (make-monitored fn)
  (let ((A (make-accumulator 0)))
    (lambda (x)
      (if (eq? x 'how-many-calls?)
        (A 0)
        (begin (A 1)
               (fn x))))))

(define (make-account balance password)
  (let ((tries 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance 
                       (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (dispatch m try-password)
      (if (eq? try-password password)
        (begin (set! tries 0)
               (cond ((eq? m 'withdraw) withdraw)
                     ((eq? m 'deposit) deposit)
                     (else (error "Unknown request:
                            MAKE-ACCOUNT" m))))
        (begin (set! tries (+ tries 1))
               (if (> tries 7)
                 (error "CALL THE COPS!!!!!")
                 (begin (display "Incorrect password") (lambda (x) (display tries)))))))
  dispatch))
